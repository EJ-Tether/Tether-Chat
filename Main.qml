import QtQuick
import QtQuick.Controls
import QtQuick.Layouts

import Tether 1.0

ApplicationWindow {
    id: _root
    visible: true
    width: 960
    height: 800

    // Custom colors
    property color humanMessageColor: "#fff8e1"  // pale yellow
    property color aiMessageColor: "#e3f2fd"     // pale blue
    property color borderColor: "#E0E0E0"
    property color sendButtonColor: "#2196F3"

    property var currentChatModel: _chatManager.chatModel

    // Fonction pour envoyer le message
    function sendMessage() {
        var text = messageInput.text.trim();
        if (text.length > 0) {
            currentChatModel.sendMessage(text);
            messageInput.text = "";
        }
    }
    // Connecter aux signaux de chatModel pour la gestion des erreurs et le défilement
    Connections {
        target: currentChatModel
        function onChatMessageAdded(message) {
            _messageListView.positionViewAtEnd();
        }
        function onChatError(error) {
            console.error("Chat Error:", error);
            // Afficher l'erreur à l'utilisateur, par exemple dans une petite bulle ou une toast
        }
        function onTotalTokensChanged() {
            console.log("Total tokens:", chatModel.totalTokens);
            // TODO: Mettre à jour un QLabel pour afficher le nombre de tokens
        }
    }


    // 1._headerChatareaDivide: separates vertically the main window in two parts: the banner
    // containing the Tab bar on top, and the main area in the rest of the window. The nature
    // of the main area is defined by the active tab: either chat area, or configuration form,
    // or "about/help/licence informations"
    ColumnLayout {
        id: _headerChatareaDivide
        anchors.fill: parent
        width: parent.width
        height: parent.height
        // 1.1 `_menuBar` : Manages the TAB bar and other buttons for the application controls
        // (common to all pages).
        RowLayout {
            id: _menuBar
            implicitHeight: 40
            width: parent.width
            TabBar {
                id: _tabBar
                currentIndex: 0

                TabButton {
                    font.bold: checked
                    text: qsTr("Chat")
                    width: implicitWidth
                }
                TabButton {
                    font.bold: checked
                    text: qsTr("Configure")
                    width: implicitWidth
                }
                TabButton {
                    font.bold: checked
                    text: qsTr("About")
                    width: implicitWidth
                }
            }
            Item {
                Layout.fillWidth: true
            }
            Button {
                id: _displayLicence
                visible: _tabBar.currentIndex === 2
                text: qsTr("Display Licence")
                height: 40
                width:80
                onClicked: {
                    // _debugLogs.open() // Si vous voulez toujours l'utiliser pour la licence
                }
            }
            ComboBox {
                id: languageSelector
                width: 240
                height: 40
                model: [ "English", "Français"]
                displayText: _settings?model[_settings.language]:"#####"
                currentIndex : 0
                onCurrentIndexChanged: {
                    if (_settings.changingLanguage) {
                        // We're currently loading the new current language.
                        // This is a false event generated by engine.retranslate(),
                        // we must ignore it
                        return;
                    }
                    _settings.language = currentIndex ;
                }
            }
            ComboBox {
                id: interlocutorSelector
                model: _chatManager.interlocutorNames // Le ComboBox se remplit automatiquement
                currentIndex: model.indexOf(_chatManager.activeInterlocutorName) // Sélectionne l'actif

                onActivated: (index) => {
                                 // Quand l'utilisateur choisit, on appelle le manager
                                 chatManager.switchToInterlocutor(interlocutorSelector.model[index])
                             }
            }
            Item {
                width:40
            }
        }

        // 1.2 `_mainArea` : manages the different version of the main area (chat, configuration, about, ...)
        StackLayout {
            id: _mainArea
            currentIndex: _tabBar.currentIndex
            Layout.fillWidth: true
            Layout.fillHeight: true
            Layout.alignment: Qt.AlignHCenter

            // 1.2.1 `_chatArea` : Chat Window content, composed of:
            // - a ListView of the former messages from the current dialog
            // - the input area where the human can type their message.
            ColumnLayout {
                id: _chatArea
                width: parent.width
                Layout.fillHeight: true
                Layout.fillWidth: true


                Rectangle {
                    id: _messagesArea
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    color: "#FAFAFA"
                    ColumnLayout {
                        id: _messageColumn
                        anchors.fill: parent
                        spacing: 0

                        // Zone des messages (ListView)
                        ListView {
                            id: _messageListView
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            Layout.margins: 10
                            spacing: 15
                            clip: true
                            verticalLayoutDirection: ListView.TopToBottom
                            model: _chatManager.chatModel

                            delegate: Rectangle {
                                id: _singleMessageArea
                                // _singleMessageArea : is the invisible rectangle occupying the full
                                // width of the window and as high as the message. Inside this
                                // invisible placeholder we'll display the message bubble, aka the rounded
                                // rectangle on 80% of the width aligned left or right with the text in it.
                                Layout.preferredWidth: _messageListView.width
                                Layout.preferredHeight: _messageBubble.height
                                implicitHeight: _messageBubble.height
                                implicitWidth: _messageListView.width
                                Rectangle {
                                    id: _messageBubble
                                    // _messageBubble: the visible rectangle with rounded corners with
                                    // the message inside.
                                    width: Math.min(_messageText.implicitWidth + 20, parent.width * 0.8)
                                    height: _messageText.implicitHeight + 20
                                    radius: 12
                                    border.width: 1
                                    border.color: borderColor
                                    color: model.isLocalMessage ? humanMessageColor : aiMessageColor
                                    x: model.isLocalMessage ? 0 : parent.width - width ;

                                    Text {
                                        id: _messageText
                                        anchors.fill: parent
                                        anchors.margins: 10
                                        text: model.text
                                        wrapMode: Text.Wrap
                                        font.pixelSize: 14
                                        color: "#333333"
                                        // Définir une largeur maximale pour que implicitHeight soit calculé correctement
                                        width: parent.width - 20 // 20 pour les marges du parent (messageBubble)
                                    }

                                }
                                ScrollBar.vertical: ScrollBar {
                                    policy: ScrollBar.AsNeeded
                                }
                            }
                            // When the `Interlocutor` model will be implemented as a `QAbstractListModel`,
                            // we must connect the signals/slots so the QML reflects the new reply
                            Connections {
                                target: _chatManager.chatModel
                                function onCountChanged() {
                                    _messageListView.positionViewAtEnd()
                                }
                            }
                        }
                        // Zone de saisie
                        Rectangle {
                            id: _inputMessageArea
                            Layout.fillWidth: true
                            height: 160
                            color: "white"
                            border.color: borderColor
                            border.width: 1

                            ScrollView {
                                id: scrollView

                                height: 150
                                width: parent.width - 70
                                anchors { top: parent.top ; left: parents.left }

                                //Layout.fillHeight: true
                                clip: true

                                ScrollBar.vertical.policy: ScrollBar.AsNeeded

                                TextArea {
                                    id: messageInput
                                    height: 150
                                    width: parent.width - 70
                                    wrapMode: Text.WordWrap
                                    placeholderText: "Saisissez votre message ici..."

                                    onContentHeightChanged: {
                                        scrollView.ScrollBar.vertical.position = 1.0;
                                    }

                                    Component.onCompleted: {
                                        forceActiveFocus()
                                    }
                                }

                            }

                            Button {
                                id: sendButton
                                width: 60
                                height: 30
                                anchors { verticalCenter: parent.verticalCenter ; right: parent.right }
                                text: "Envoi"
                                background: Rectangle {
                                    color: sendButton.enabled ? sendButtonColor : "lightgray"
                                    radius: 6
                                }
                                contentItem: Text {
                                    text: sendButton.text
                                    color: "white"
                                    horizontalAlignment: Text.AlignHCenter
                                    verticalAlignment: Text.AlignVCenter
                                    font.bold: true
                                }

                                onClicked: sendMessage()
                                enabled: messageInput.text.trim().length > 0
                            }
                        }
                    }
                }
            }
            // 1.2.2 `_configArea` : Configuration form: IP address of the API endpoint, API Key,
            // Size of the rolling context, directories used for data storage, ...
            // ------------------------------
            ColumnLayout {
                id: _configArea
                visible: true
                width: parent.width
                Layout.fillHeight: true
                Label {
                    text: "Configuration Window : PLACEHOLDER, TO BE IMPLEMENTED"
                }
            }
            // 1.2.3 `_infoArea` : Information page, versions, details, URL of the github, ...
            // ------------------------------
            ColumnLayout {
                id: _infoArea
                visible: true
                width: parent.width
                Layout.fillHeight: true
                Label {
                    text: "Information Window : PLACEHOLDER, TO BE IMPLEMENTED"
                }
            }
        }
    }
}
