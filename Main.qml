import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Qt.labs.folderlistmodel
import Qt.labs.platform

import Tether 1.0

ApplicationWindow {
    id: _root
    visible: true
    width: 960
    height: 800

    // DEBUG MODE: see below debug console popup to show the console.log from the QML code during development
    property bool _debugMode : false

    // Custom colors
    property color humanMessageColor: "#fff8e1"  // pale yellow
    property color aiMessageColor: "#e3f2fd"     // pale blue
    property color borderColor: "#E0E0E0"
    property color sendButtonColor: "#2196F3"

    // 1._headerChatareaDivide: separates vertically the main window in two parts: the banner containing the Tab bar,
    // and the main area, whose nature is defined by the active tab: chat area, configuration form, or "about/help informations"
    ColumnLayout {
        id: _headerChatareaDivide
        anchors.fill: parent
        width: parent.width
        Component.onCompleted: {
            console.log("typeof _consoleMessages=",typeof _consoleMessages);
            if (typeof _consoleMessages != "undefined") {
                _debugMode = true ;
            }
        }
        // 1.1 `_menuBar` : Manages the TAB bar and other buttons for the application controls (common to all pages)
        RowLayout {
            id: _menuBar
            implicitHeight: 40
            width: parent.width
            TabBar {
                id: _tabBar
                currentIndex: 0

                TabButton {
                    font.bold: checked
                    text: qsTr("Chat")
                    width: implicitWidth
                }
                TabButton {
                    font.bold: checked
                    text: qsTr("Configure")
                    width: implicitWidth
                }
                TabButton {
                    font.bold: checked
                    text: qsTr("About")
                    width: implicitWidth
                }
            }
            Item {
                Layout.fillWidth: true
            }
            Button {
                id: _displayLicence
                visible: _tabBar.currentIndex == 2
                text: qsTr("Display Licence")
                height: 40
                width:80
                onClicked: {
                    _debugLogs.open()
                }
            }

            Button {
                id: _openDebugButton
                text: "Open debug logs"
                visible: _debugMode
                height: 40
                width:80
                onClicked: {
                    _debugLogs.open()
                }
            }
            Button {
                id: _closeDebugButton
                text: "Close debug logs"
                visible: _debugMode
                height: 40
                width:80
                onClicked: {
                    _debugLogs.close()
                }
            }
            ComboBox {
                id: languageSelector
                width: 240
                height: 40
                model: [ "English", "Français"]
                displayText: _settings?model[_settings.language]:"#####"
                currentIndex : 0
                onCurrentIndexChanged: {
                    if (_settings.changingLanguage) {
                        // We're currently loading the new current language.
                        // This is a false event generated by engine.retranslate(),
                        // we must ignore it
                        return;
                    }
                    console.log("Langue sélectionnée:", currentIndex);
                    _settings.language = currentIndex ;
                }
            }
            Item {
                width:40
            }
        }

        // 1.2 `_mainArea` : manages the different version of the main area (chat, configuration, about, ...)
        StackLayout {
            id: _mainArea
            currentIndex: _tabBar.currentIndex
            Layout.fillWidth: true
            Layout.fillHeight: true
            Layout.alignment: Qt.AlignHCenter

            // 1.2.1 `_chatArea` : Chat Window content
            // ------------------------------
            ColumnLayout {
                id: _chatArea
                width: parent.width
                Layout.fillHeight: true

                // Debug object
                Rectangle {
                    color: "transparent"
                    border { color: "red" ; width: 5}
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    z:-1
                }


                Rectangle {
                    id: _messagesArea
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    color: "#FAFAFA"

                    ColumnLayout {
                        Layout.fillWidth: true
                        Layout.fillHeight: true
                        spacing: 0

                        // Zone des messages (ListView)
                        ListView {
                            id: _messageListView
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            Layout.margins: 10
                            spacing: 15
                            clip: true
                            verticalLayoutDirection: ListView.TopToBottom

                            // Fake model for debugging the GUI
                            model: ListModel {
                                ListElement {
                                    isLocalMessage: true
                                    text: "first message sent"
                                }

                                ListElement {
                                    isLocalMessage: false
                                    text: "first message received"
                                }
                                ListElement {
                                    isLocalMessage: true
                                    text: "Very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long second message sent"
                                }
                                ListElement {
                                    isLocalMessage: false
                                    text: "Very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long second answer received"
                                }
                                ListElement {
                                    isLocalMessage: true
                                    text: "third message sent"
                                }

                                ListElement {
                                    isLocalMessage: false
                                    text: "third message received"
                                }

                            }

                            delegate: Rectangle {
                                id: _messageBubble
                                width: Math.min(_messageText.implicitWidth + 20, ListView.view.width * 0.8)
                                height: _messageText.implicitHeight + 20
                                radius: 12
                                border.width: 1
                                border.color: borderColor
                                color: model.isLocalMessage ? humanMessageColor : aiMessageColor

                                // Positionnement horizontal
                                x: model.isLocalMessage ? 10 :
                                    (ListView.view.width - width - 10)

                                Text {
                                    id: _messageText
                                    anchors.fill: parent
                                    anchors.margins: 10
                                    text: model.text
                                    wrapMode: Text.Wrap
                                    font.pixelSize: 14
                                    color: "#333333"
                                }
                            }
                            ScrollBar.vertical: ScrollBar {
                                policy: ScrollBar.AsNeeded
                            }
                        }
                        // When the `Interlocutor` model will be implemented as a `QAbstractListModel`,
                        // we must connect the signals/slots so the QML reflects the new reply
                        //Connections {
                        //    target: interlocutor.messageModel
                        //    function onCountChanged() {
                        //        _messageListView.positionViewAtEnd()
                        //    }
                        //}
                        // Zone de saisie
                        Rectangle {
                            Layout.fillWidth: true
                            Layout.preferredHeight: 80
                            color: "white"
                            border.color: borderColor
                            border.width: 1

                            RowLayout {
                                anchors.fill: parent
                                anchors.margins: 10

                                TextArea {
                                    id: messageInput
                                    Layout.fillWidth: true
                                    Layout.fillHeight: true
                                    placeholderText: "Tapez votre message..."
                                    wrapMode: TextArea.Wrap
                                    font.pixelSize: 14
                                    selectByMouse: true

                                    Keys.onPressed: function(event) {
                                        if ((event.modifiers & Qt.ControlModifier) && (event.key === Qt.Key_Return || event.key === Qt.Key_Enter)) {
                                            sendMessage()
                                            event.accepted = true
                                        }
                                    }
                                }

                                Button {
                                    id: sendButton
                                    Layout.preferredWidth: 60
                                    Layout.preferredHeight: 40
                                    text: "Envoi"
                                    background: Rectangle {
                                        color: sendButton.enabled ? sendButtonColor : "lightgray"
                                        radius: 6
                                    }
                                    contentItem: Text {
                                        text: sendButton.text
                                        color: "white"
                                        horizontalAlignment: Text.AlignHCenter
                                        verticalAlignment: Text.AlignVCenter
                                        font.bold: true
                                    }

                                    onClicked: sendMessage()
                                    enabled: messageInput.text.trim().length > 0
                                }
                            }
                        }
                    }
                }
            }
            // 1.2.2 `_configArea` : Configuration form: IP address of the API endpoint, API Key,
            // Size of the rolling context, directories used for data storage, ...
            // ------------------------------
            ColumnLayout {
                id: _configArea
                visible: true
                width: parent.width
                Layout.fillHeight: true
                Label {
                    text: "Configuration Window : PLACEHOLDER, TO BE IMPLEMENTED"
                }
            }
            // 1.2.3 `_infoArea` : Information page, versions, details, URL of the github, ...
            // ------------------------------
            ColumnLayout {
                id: _infoArea
                visible: true
                width: parent.width
                Layout.fillHeight: true
                Label {
                    text: "Information Window : PLACEHOLDER, TO BE IMPLEMENTED"
                }
            }


        }


        // Managing console messages in DEBUG MODE : showing the developper
        // the console messages in a popup window (the debug mode is decided
        // by the existence of an object _consoleMessage in the root context
        // of the Qt Quick engine.
        // NB: I usually find the Debug console useful for debugging the QML
        // part, i.e. printing messages with `console.log` in various parts
        // of the JS code.
        Popup {
            id: _debugLogs
            width: parent.width // 880
            height: parent.height // 640
            topMargin: 160
            x: 0
            y: 160

            ScrollView {
                anchors.fill: parent
                TextArea {
                    width: parent.width
                    height: parent.height
                    readOnly: true
                    text: (typeof _consoleMessages === "undefined")? "":_consoleMessages.consoleMessages
                    wrapMode: TextEdit.WordWrap
                }
            }
        }
    }
}
